#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Location {
    #[serde(skip_serializing_if_none)]
    pub address: Option<String>,
    pub lat: f64,
    pub lon: f64,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Spacefed {
    pub spacenet: bool,
    pub spacesaml: bool,
    pub spacephone: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Icon {
    pub open: String,
    pub close: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct State {
    pub open: Option<bool>,
    #[serde(skip_serializing_if_none)]
    pub lastchange: Option<u64>,
    #[serde(skip_serializing_if_none)]
    pub trigger_person: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub message: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub icon: Option<Icon>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Event {
    pub name: String,
    pub _type: String,
    pub timestamp: u64,
    #[serde(skip_serializing_if_none)]
    pub extra: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Keymaster {
    #[serde(skip_serializing_if_none)]
    pub name: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub irc_nick: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub phone: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub email: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub twitter: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct GoogleContact {
    #[serde(skip_serializing_if_none)]
    pub plus: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Contact {
    #[serde(skip_serializing_if_none)]
    pub phone: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub sip: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub keymasters: Option<Vec<Keymaster>>,
    #[serde(skip_serializing_if_none)]
    pub irc: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub twitter: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub facebook: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub google: Option<GoogleContact>,
    #[serde(skip_serializing_if_none)]
    pub identica: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub foursquare: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub email: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub ml: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub jabber: Option<String>,
    #[serde(skip_serializing_if_none)]
    pub issue_mail: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Feed {
    #[serde(skip_serializing_if_none)]
    pub _type: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Feeds {
    #[serde(skip_serializing_if_none)]
    pub blog: Option<Feed>,
    #[serde(skip_serializing_if_none)]
    pub wiki: Option<Feed>,
    #[serde(skip_serializing_if_none)]
    pub calendar: Option<Feed>,
    #[serde(skip_serializing_if_none)]
    pub flickr: Option<Feed>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Cache {
    pub schedule: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct RadioShow {
    pub name: String,
    pub url: String,
    pub _type: String,
    pub start: String,
    pub end: String,
}

/// The main Space API status object.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct Status {

    // Hackerspace properties
    pub api: String,
    pub space: String,
    pub logo: String,
    pub url: String,
    pub location: Location,
    pub contact: Contact,

    // Hackerspace features / projects
    #[serde(skip_serializing_if_none)]
    pub spacefed: Option<Spacefed>,
    #[serde(skip_serializing_if_none)]
    pub projects: Option<Vec<String>>,
    #[serde(skip_serializing_if_none)]
    pub cam: Option<Vec<String>>,
    #[serde(skip_serializing_if_none)]
    pub feeds: Option<Feeds>,
    #[serde(skip_serializing_if_none)]
    pub events: Option<Vec<Event>>,
    #[serde(skip_serializing_if_none)]
    pub radio_show: Option<Vec<RadioShow>>,

    // SpaceAPI internal usage
    #[serde(skip_serializing_if_none)]
    pub cache: Option<Cache>,
    pub issue_report_channels: Vec<String>,

    // Mutable data
    pub state: State,
    #[serde(skip_serializing_if_none)]
    pub sensors: Option<Sensors>,
}

